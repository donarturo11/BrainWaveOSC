name: BrainwaveOSC

on:
  pull_request:
    branches: [ ]
  push:
    branches: [ ]
#  create:
#      tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10
# https://openframeworks.cc/ci_server/versions/nightly/of_v20230223_osx_nightly.zip
env:
  pkgname: BrainwaveOSC
jobs:
  build:
    strategy:
      matrix:
       include:
        #- { os: windows-latest, flags: "", shell: 'msys2 {0}', deps-prefix: "/opt/deps", aqt-os: "windows", aqt-arch: "win64_mingw", aqt-prefix: "/opt/Qt", aqt-module: "mingw_64" }
        #- { os: ubuntu-latest, shell: 'bash' }
        - { os: macos-latest, shell: 'bash', of-sys: 'osx' }
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: ${{matrix.shell}}

    steps:
#    - name: Install the Apple certificate and provisioning profile
#      if: ${{runner.os == 'macOS'}}
#      env:
#          P12_CERTIFICATE_BASE64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#      run: |
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          echo "IDENTITY_NAME=donarturo11.github.io" >> $GITHUB_ENV
#          echo -n "$P12_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo "::notice:: decode certificate succeed"
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security default-keychain -s $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign -T /usr/bin/productsign || echo "::warning:: Import certificate failed"
#          security list-keychain -d user -s $KEYCHAIN_PATH || echo "::warning:: List keychain failed"
#          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
#          security find-identity || echo "::warning:: List keychain failed"
          
    - if: ${{runner.os == 'Windows'}}
      name: Install MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        
    - name: download and install openFrameworks
      run: |
           
           git clone https://github.com/openframeworks/openFrameworks
           export OF_ROOT="${{github.workspace}}/openFrameworks"
           echo "OF_ROOT=${OF_ROOT}" >> $GITHUB_ENV
           echo "::notice:: ${OF_ROOT}"
           cd ${OF_ROOT}
           echo "::notice:: ${PWD}"
           bash ./scripts/${{ matrix.of-sys }}/download_libs.sh

    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
           path: openFrameworks/apps
    
    - name: Configure
      run: |
           PROJECT_ROOT=${{ env.OF_ROOT }}/apps/BrainwaveOSC
           BUILD_DIR=${PROJECT_ROOT}/BrainWaveOSC/
           echo PROJECT_ROOT=${PROJECT_ROOT} >> $GITHUB_ENV
           echo BUILD_DIR=${BUILD_DIR} >> $GITHUB_ENV
           
           cd $PROJECT_ROOT
           cp -R addons/* ${{ env.OF_ROOT }}/addons/
    
    - name: Prepare version
      run: |
          echo GITREV=$(git rev-parse --short HEAD) >> $GITHUB_ENV
          
    - name: Build
      run: |
          cd ${{ env.BUILD_DIR }}
          make
                     
#    - name: Setup tmate session
#      uses: mxschmitt/action-tmate@v3
#      if: ${{ failure() }}
#      #if: ${{runner.os == 'macOS'}}
#      with:
#          limit-access-to-actor: true
#          #install-dependencies: false
#      timeout-minutes: 60

    - name: Upload All Binaries
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.pkgname}}-${{runner.os}}
        path: ${{github.workspace}}/${{env.pkgname}}-${{runner.os}}
                
    - name: Print variables
      run: |
          echo "::notice:: github.event_name = ${{ github.event_name }}"
          echo "::notice:: github.ref = ${{ github.ref }}"

  publish:
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Tag
        id: get_tag
        run: echo ::set-output name=BUILD_TAG::build-$(date +'%Y%m%d%H%M')

      - name: Get macOS Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-macOS
          path: ${{github.workspace}}/${{env.pkgname}}-macOS

      - name: Get Linux Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-Linux
          path: ${{github.workspace}}/${{env.pkgname}}-Linux
          
      - name: Get Windows Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-Windows
          path: ${{github.workspace}}/${{env.pkgname}}-Windows

      - if: github.event_name == 'push' # this is a snapshot build. create a release and upload binaries
        name: Create Snapshot Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          tag_name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          generate_release_notes: true
          prerelease: true
          files: |
            ${{github.workspace}}/${{env.pkgname}}-Windows/*
            ${{github.workspace}}/${{env.pkgname}}-Linux/*
            ${{github.workspace}}/${{env.pkgname}}-macOS/*

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        name: Find Existing Release
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          tag: ${{ github.ref_name }}

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload macOS binary
        name: Update Tagged Release (macOS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-${{runner.os}}
          asset_name: ${{env.pkgname}}-macOS
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Linux binary
        name: Update Tagged Release (Linux)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-Linux
          asset_name: ${{env.pkgname}}-linux-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Windows binary
        name: Update Tagged Release (Windows)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-Windows
          asset_name: ${{env.pkgname}}-win-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id == 0 # otherwise release does not exist, create one and upload binaries
        name: Create Tagged Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: false
          files: |
            ${{github.workspace}}/${{env.pkgname}}-macOS*
            ${{github.workspace}}/${{env.pkgname}}-Windows*
            ${{github.workspace}}/${{env.pkgname}}-Linux*
