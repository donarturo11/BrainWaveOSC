name: BrainwaveOSC

on:
  pull_request:
    branches: [ ]
  push:
    branches: [ ]
#  create:
#      tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10
# https://openframeworks.cc/ci_server/versions/nightly/of_v20230223_osx_nightly.zip
env:
  pkgname: BrainwaveOSC
jobs:
  build:
    strategy:
      matrix:
       include:
        #- { name: 'windows-mingw', os: windows-latest, flags: "", shell: 'msys2 {0}', of-sys: 'msys2' }
        - { name: 'windows-msvc', os: windows-latest, flags: "", shell: 'msys2 {0}', of-sys: 'vs' }
        #- { name: 'linux', os: ubuntu-latest, shell: 'bash', of-sys: 'linux' }
        #- { name: 'macos', os: macos-latest, shell: 'bash', of-sys: 'osx' }
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: ${{matrix.shell}}

    steps:
#    - name: Install the Apple certificate and provisioning profile
#      if: ${{runner.os == 'macOS'}}
#      env:
#          P12_CERTIFICATE_BASE64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#      run: |
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          echo "IDENTITY_NAME=donarturo11.github.io" >> $GITHUB_ENV
#          echo -n "$P12_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo "::notice:: decode certificate succeed"
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security default-keychain -s $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign -T /usr/bin/productsign || echo "::warning:: Import certificate failed"
#          security list-keychain -d user -s $KEYCHAIN_PATH || echo "::warning:: List keychain failed"
#          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
#          security find-identity || echo "::warning:: List keychain failed"
          
    - if: ${{runner.os == 'Windows'}}
      name: Install MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: base base-devel p7zip zip unzip git
    
    - name: Install Linux Dependencies
      if: ${{runner.os == 'Linux'}}
      run: |
           sudo apt-get update
           sudo apt-get install -y gobjc++

    - name: Install MinGW Dependencies
      if: ${{matrix.of-sys == 'msys'}}
      run: |
           echo "::notice:: MINGW_PACKAGE_PREFIX=${MINGW_PACKAGE_PREFIX}"
           pacman -S --noconfirm \
               ${MINGW_PACKAGE_PREFIX}-toolchain \
               ${MINGW_PACKAGE_PREFIX}-gcc-objc \
               ${MINGW_PACKAGE_PREFIX}-glew

    - name: Configure environment
      run: |
           if [ ${{ runner.os }} == 'Windows' ]; then
               echo WORKSPACE=$(cygpath -u "${{github.workspace}}") >> $GITHUB_ENV
           else
               echo WORKSPACE=${{github.workspace}} >> $GITHUB_ENV
           fi
        
    - name: download and install openFrameworks
      run: |
           
           git clone https://github.com/openframeworks/openFrameworks
           export OF_ROOT="${{env.WORKSPACE}}/openFrameworks"
           echo "OF_ROOT=${OF_ROOT}" >> $GITHUB_ENV
           echo "::notice:: ${OF_ROOT}"
           cd ${OF_ROOT}
           # PATCH="https://gist.githubusercontent.com/donarturo11/0bc7afc5caf1b5cc005d9cbeb496afc5/raw/e830887d0f39f516ce8227f3c694e17e6e366f7f/0000-add-support-for-other-mingw-environments.patch"
           # curl ${PATCH} | patch -p0
           echo "::notice:: ${PWD}"
           if [ ${{ matrix.of-sys }} != 'vs' ]; then
               echo "::notice:: Mingw Package prefix: ${MINGW_PACKAGE_PREFIX}"
               bash ./scripts/${{ matrix.of-sys }}/install_dependencies.sh --noconfirm
           elif [ ${{ runner.os }} == 'Linux' ]; then
               sudo apt-get install -y libunwind-dev
               sudo bash ./scripts/${{ matrix.of-sys }}/ubuntu/install_dependencies.sh
           fi
           bash ./scripts/${{ matrix.of-sys }}/download_libs.sh
           if [ ${{runner.os }} != 'macOS' ] && [ {{ matrix.of-sys }} != 'vs' ]; then
               bash ./scripts/${{ matrix.of-sys }}/compileOF.sh    
           fi
           

    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
           path: openFrameworks/apps/BrainwaveOSC
    
    - name: Configure
      run: |
           PROJECT_DIR=${{ env.OF_ROOT }}/apps/BrainwaveOSC
           BUILD_DIR=${PROJECT_DIR}/BrainWaveOSC/
           echo PROJECT_DIR=${PROJECT_DIR} >> $GITHUB_ENV
           echo BUILD_DIR=${BUILD_DIR} >> $GITHUB_ENV
                      
           cd $PROJECT_DIR
           echo "::notice:: ${PWD}"
           cp -R addons/* ${{ env.OF_ROOT }}/addons/
    
    - name: Setup MSBuild
      if: ${{ matrix.of-sys == 'vs' }}
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Prepare version
      run: |
          echo GITREV=$(git rev-parse --short HEAD) >> $GITHUB_ENV
          
    - name: Build (UNIX/Msys)
      if: ${{ matrix.of-sys != 'vs' }}
      run: |
          cd ${{ env.BUILD_DIR }}
          make
    
    - name: Build (MSVC)
      if: ${{ matrix.of-sys == 'vs' }}
      run: |
          msbuild ${BUILD_DIR}/BrainwaveOSC.vcxproj
    
    - name: Prepare Packages names
      run: |
          PACKAGE_NAME=${{github.workspace}}/${{env.pkgname}}-${{matrix.name}}
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> ${GITHUB_ENV}
    
    - name: Prepare Artifacts directory
      run: |
          DESTDIR=${{github.workspace}}/${{env.pkgname}}-${{matrix.name}}
          echo "DESTDIR=$DESTDIR" >> $GITHUB_ENV
          mkdir $DESTDIR || echo "::warning:: $DESTDIR already exists"
    
    - name: Prepare binaries to upload (windows)
      run: |
          cd ${BUILD_DIR}/bin
          7z a -r ${DESTDIR}/${PACKAGE_NAME} *
      
    - name: Prepare binaries to upload (Linux)
      run: |
          cd ${BUILD_DIR}/
          mv bin ${PACKAGE_NAME}
          tar -vczf $DESTDIR/${PACKAGE_NAME} ${PACKAGE_NAME}
    
    - name: Prepare binaries to upload (MacOS)
      run: |
          hdiutil create -size 700m -fs HFS+ -volname "${PACKAGE_NAME}" temp.dmg
          hdiutil attach temp.dmg
          cd ${BUILD_DIR}/bin
          codesign --verbose --strict --continue --timestamp --force --deep -s- *.app
          cp -av * /Volumes/${PACKAGE_NAME}
          ln -s /Applications/ /Volumes/${PACKAGE_NAME}/Applications
          hdiutil detach /Volumes/${PACKAGE_NAME}/Applications
          hdiutil convert temp.dmg -format UDBZ \
                    -o ${DESTDIR}/${PACKAGE_NAME}.dmg
          shasum -a 256 ${DESTDIR}/${PACKAGE_NAME}.dmg
          
                     
#    - name: Setup tmate session
#      uses: mxschmitt/action-tmate@v3
#      if: ${{ failure() }}
#      #if: ${{runner.os == 'macOS'}}
#      with:
#          limit-access-to-actor: true
#          #install-dependencies: false
#      timeout-minutes: 60

    - name: Upload All Binaries
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.pkgname}}-${{runner.os}}
        path: ${{github.workspace}}/${{env.pkgname}}-${{runner.os}}
                
    - name: Print variables
      run: |
          echo "::notice:: github.event_name = ${{ github.event_name }}"
          echo "::notice:: github.ref = ${{ github.ref }}"

  publish:
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Tag
        id: get_tag
        run: echo ::set-output name=BUILD_TAG::build-$(date +'%Y%m%d%H%M')

      - name: Get macOS Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{env.pkgname}}-macos
          path: ${{github.workspace}}/${{env.pkgname}}-macos

      - name: Get Linux Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{env.pkgname}}-linux
          path: ${{github.workspace}}/${{env.pkgname}}-linux
          
      - name: Get Windows Binary (mingw)
        uses: actions/download-artifact@v2
        with:
          name: ${{env.pkgname}}-windows-mingw
          path: ${{github.workspace}}/${{env.pkgname}}-windows-mingw
          
      - name: Get Windows Binary (msvc)
        uses: actions/download-artifact@v2
        with:
          name: ${{env.pkgname}}-windows-msvc
          path: ${{github.workspace}}/${{env.pkgname}}-windows-msvc

      - if: github.event_name == 'push' # this is a snapshot build. create a release and upload binaries
        name: Create Snapshot Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          tag_name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          generate_release_notes: true
          prerelease: true
          files: |
            ${{github.workspace}}/${{env.pkgname}}-msvc/*
            ${{github.workspace}}/${{env.pkgname}}-mingw/*
            ${{github.workspace}}/${{env.pkgname}}-linux/*
            ${{github.workspace}}/${{env.pkgname}}-macos/*

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        name: Find Existing Release
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          tag: ${{ github.ref_name }}

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload macOS binary
        name: Update Tagged Release (macOS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-${{runner.os}}
          asset_name: ${{env.pkgname}}-macOS
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Linux binary
        name: Update Tagged Release (Linux)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-linux
          asset_name: ${{env.pkgname}}-linux-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Windows binary
        name: Update Tagged Release (Windows msvc)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-windows-msvc
          asset_name: ${{env.pkgname}}-win-msvc-x86_64
          asset_content_type: application/octet-stream
      
      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Windows binary
        name: Update Tagged Release (Windows mingw)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-windows-mingw
          asset_name: ${{env.pkgname}}-win-mingw-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id == 0 # otherwise release does not exist, create one and upload binaries
        name: Create Tagged Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: false
          files: |
            ${{github.workspace}}/${{env.pkgname}}-macos*
            ${{github.workspace}}/${{env.pkgname}}-windows-msvc*
            ${{github.workspace}}/${{env.pkgname}}-windows-mingw*
            ${{github.workspace}}/${{env.pkgname}}-linux*
